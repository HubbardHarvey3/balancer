@page "/donors"
@inject DonorService DonorService
@inject MudBlazor.IDialogService DialogService
@inject ILogger<Donors> Logger
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Logging
@using MudBlazor
@using global::Balancer.Components.Services
@using global::Balancer.Components.Models
@using global::Balancer.Components.Data
@using global::Balancer.Components

<h3>Donor Management</h3>

<table>
    <thead>
        <tr>
            <th>Donor Name</th>
            <th>Address</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>
                <input type="text" @bind="newDonor.Name" />
            </td>
            <td>
                <input type="text" @bind="newDonor.Address" />
            </td>
            <td>
                <button @onclick="SaveDonor">Save</button>
            </td>
        </tr>
    </tbody>
</table>

<hr />

<table>
    <thead>
        <tr>
            <th>Donor Number</th>
            <th>Donor Name</th>
            <th>Address</th>
            <th>Total Donations</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var donor in donors)
        {
            <tr>
                <td>@donor.DonorNumber</td>
                <td>
                    @if (editingDonor?.Name == donor.Name)
                    {
                        <input type="text" @bind="editingDonor.Name" />
                    }
                    else
                    {
                        @donor.Name
                    }
                </td>
                <td>
                    @if (editingDonor?.Address == donor.Address)
                    {
                        <input type="text" @bind="editingDonor.Address" />
                    } 
                    else
                    {
                        @donor.Address
                    }
                </td>
                <td>@donor.TotalDonations</td>
                <td>
                    @if (editingDonor?.DonorNumber == donor.DonorNumber)
                    {
                        <MudButton @onclick="() => UpdateDonor(donor)" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
                        <MudButton @onclick="CancelEdit" Variant="Variant.Filled" Color="Color.Warning">Cancel</MudButton>
                    }
                    else
                    {
                        <MudButton @onclick="() => EditDonor(donor)" Variant="Variant.Filled" Color="Color.Primary">Edit</MudButton>
                        <MudButton @onclick="() => Confirm(donor.DonorNumber)" Variant="Variant.Filled" Color="Color.Warning">Delete</MudButton>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<DonorModel> donors = new();
    private DonorModel newDonor = new();
    private DonorModel? editingDonor;

    protected override async Task OnInitializedAsync()
    {
        await LoadDonors();
    }

    private async Task LoadDonors()
    {
        donors = await DonorService.GetDonorsAsync();
    }

    private async Task SaveDonor()
    {
        if (!string.IsNullOrWhiteSpace(newDonor.Name))
        {
            await DonorService.AddDonorsAsync(newDonor);
            newDonor = new();
            await LoadDonors();
        }
    }

    private void EditDonor(DonorModel donor)
    {
        editingDonor = donor;
    }

    private async Task UpdateDonor(DonorModel donor)
    {
        if (editingDonor != null)
        {
            await DonorService.UpdateDonorAsync(editingDonor);
            editingDonor = null;
            await LoadDonors();
        }
    }

    private void CancelEdit()
    {
        editingDonor = null;
    }

    private async Task DeleteDonor(int donorNumber)
    {
        await DonorService.DeleteDonorAsync(donorNumber);
        await LoadDonors();
    }

    private async Task Confirm(int donorNumber) {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you want to confirm?");
        parameters.Add("ButtonText", "Yes");
        var dialogresult = await DialogService.ShowAsync<ConfirmDeleteDialog>("Confirm", parameters);
        var result = await dialogresult.Result;
        if (!result.Canceled)
        {
            await DeleteDonor(donorNumber);
        }
        else 
        {
            Logger.LogInformation("Dialog was canceled");
        }

    }
}
