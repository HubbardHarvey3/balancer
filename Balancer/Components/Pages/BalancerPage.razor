@page "/"
@inject IDonationEntryService DonationEntryService
@inject IDonorService DonorService
@inject IBalancerService BalancerService
@inject MudBlazor.IDialogService DialogService
@inject ILogger<Donors> Logger
@inject CashService CashService
@inject CheckService CheckService
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Logging
@using MudBlazor
@using Balancer.Components.Services
@using Balancer.Components.Models
@using Balancer.Components.Data

<h3>Balancer</h3>

<MudDatePicker DateChanged="UpdateDate" Date="@entryDate" Label="Select Date"  DateFormat="MM/dd/yyyy" /> 

<MudSimpleTable Style="overflow-x: auto;"> 
    <thead> 
        <tr> 
            <th>Donor Number</th> 
            <th>Donor Name</th> 
            <th>Cash</th> 
            <th>Check</th> 
            <th>Total</th> 
            <th></th> 
        </tr> 
    </thead> 
    <tbody>
        <tr>
            <td>
                <MudTextField OnBlur="@(e => GetDonor(newDonation.DonorNumber))" @bind-Value="newDonation.DonorNumber" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </td>
            <td>
                <MudTextField @bind-Value="newDonation.Name" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </td>
            <td>
                <MudTextField 
                @bind-Value="newDonation.Cash" 
                Variant="Variant.Outlined" 
                Margin="Margin.Dense"
                Error="@donorEntryHasError" ErrorText="Amount does not balance">
                </MudTextField>
            </td>
            <td>
                <MudTextField 
                @bind-Value="newDonation.Check" 
                Variant="Variant.Outlined" 
                Margin="Margin.Dense"
                Error="@donorEntryHasError" ErrorText="Amount does not balance">
                </MudTextField>
            </td>
            <td>
                <MudTextField 
                @bind-Value="newDonation.Total" 
                Variant="Variant.Outlined" 
                Margin="Margin.Dense"
                Error="@donorEntryHasError" ErrorText="Amount does not balance">
                </MudTextField>
            </td>
            <td>
                <MudButton OnClick="Save" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
            </td>
        </tr>
    </tbody>
</MudSimpleTable> 

<MudSimpleTable Style="overflow-x: auto;" Dense=true> 
    <thead> 
        <tr> 
            <th>Donor Number</th> 
            <th>Donor Name</th> 
            <th>Cash</th> 
            <th>Check</th> 
            <th>Total</th> 
            <th>Date</th> 
        </tr> 
    </thead> 
    <tbody> 
        @foreach (var entry in donorEntries) 
        { 
            <tr> 
                <td>@entry.DonorNumber</td> 
                <td>@entry.Name</td> 
                <td>@entry.Cash</td> 
                <td>@entry.Check</td> 
                <td>@entry.Total</td> 
                <td>@entry.Date</td>
                <td>
                    <MudButton OnClick="(e => DeleteDonationEntry(entry))" Variant="Variant.Filled" Color="Color.Error">Delete</MudButton>
                </td>
            </tr> 
        } 
    </tbody> 
</MudSimpleTable> 

<hr />

<MudGrid>
    <MudItem xs="6">
        <MudItem xs="6">
            <MudText Color="@(cashAmountError ? Color.Error : Color.Inherit)" Typo="Typo.h4">Cash</MudText> 
            <MudText 
            Color="@(cashAmountError ? Color.Error : Color.Inherit)">
                Total Cash From Entries Table : @TotalEntryCashAmount.ToString("C")
            </MudText>
            <MudText 
            Color="@(cashAmountError ? Color.Error : Color.Inherit)">
                Total Cash From Entries Table : @TotalCashAmount.ToString("C")
            </MudText>
        </MudItem>
        <MudSimpleTable Style="overflow-x: auto;" Dense=true>
            <thead>
                <th>Denominations</th>
                <th>Number of Bills/Coins</th>
            </thead>
            <tbody>
                @foreach (var denomination in CashService.DenominationAmounts.Keys)
                {
                    <tr>
                        <td>@denomination</td>
                        <td>
                            <MudNumericField 
                            T="int"
                            Min="0"
                            Value="@CashService.DenominationAmounts[denomination]"
                            ValueChanged="(newValue) => UpdateCashDenomination(denomination, newValue)">
                            </MudNumericField>
                        </td>
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
    </MudItem>
    <MudItem xs="6">
        <MudItem xs="6">
            <MudText Color="@(checkAmountError ? Color.Error : Color.Inherit)" Typo="Typo.h4">Check</MudText> 
            <MudText 
            Color="@(checkAmountError ? Color.Error : Color.Inherit)">
                Total Check Amounts From Entries Table : @TotalEntryCheckAmount.ToString("C")           
            </MudText>
            <MudText 
            Color="@(checkAmountError ? Color.Error : Color.Inherit)">
                Total Check Amounts From Below Table: @TotalCheckAmount.ToString("C")
            </MudText>
        </MudItem>
        <MudSimpleTable Style="overflow-x: auto;" Dense=true>
            <thead>
                <th>Check Amounts</th>
            </thead>
            <tbody>
                @for (int i=0; i < CheckEntryList.Count; i++)
                {
                    int capturedIndex = i;
                    <tr>
                        <td>
                            <MudNumericField 
                            T="decimal"  
                            Value="@CheckEntryList[capturedIndex]"
                            ValueChanged="(newValue) => UpdateCheckTotal(newValue, capturedIndex)"
                            Variant="Variant.Outlined" />
                        </td>
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
        <MudButton OnClick="AddCheckAmount" Variant="Variant.Filled" Color="Color.Primary">Add Check</MudButton>
    </MudItem>
</MudGrid>

@code {
    private List<DonationEntryModel> donorEntries = new();
    private DonationEntryModel newDonation = new();
    private DateTime? entryDate = DateTime.Today;
    private bool donorEntryHasError = false;
    private bool checkAmountError = false;
    private bool cashAmountError = false;
    private decimal TotalCashAmount = 0;
    private decimal TotalEntryCashAmount = 0;
    private decimal TotalCheckAmount = 0;
    private decimal TotalEntryCheckAmount { get; set; } = 0;
    private List<decimal> CheckEntryList = new List<decimal> { 0.00m, 0.00m, 0.00m, 0.00m, 0.00m, 0.00m, 0.00m, 0.00m, 0.00m, 0.00m };



    protected override async Task OnInitializedAsync()
    {
        await LoadDonorsByDate(entryDate);
    }

    private async Task LoadDonorsByDate(DateTime? entryDate)
    {
        DateOnly _date;
        if (entryDate != null)
        {
            _date = DateOnly.FromDateTime((DateTime)entryDate);
        }
        else
        {
            _date = DateOnly.FromDateTime(DateTime.Today);        
        }
        if (donorEntries != null)
        {
            donorEntries = await DonationEntryService.GetDonorEntriesByDateAsync(_date);
        }
    }

    private async Task Save()
    {
        if (
            BalancerService.BalanceTotal(newDonation.Cash, newDonation.Check, newDonation.Total) && 
            !string.IsNullOrEmpty(newDonation.Name)
        )
        {
            donorEntryHasError = false;
            await DonationEntryService.SaveDonationEntry(newDonation);
            newDonation = new();
            await LoadDonorsByDate(entryDate);
            UpdateEntryCashTotal();
            UpdateEntryCheckTotal();
            StateHasChanged();
        }
        else
        {
            donorEntryHasError = true; 
            StateHasChanged();
        }
    }

    private async Task GetDonor(int donorNumber)
    {
        if (entryDate != null)
        {
            newDonation.Date = DateOnly.FromDateTime((DateTime)entryDate);
        }
        DonorModel? result;
        result = await DonorService.GetSingleDonorAsync(donorNumber);
        if (result == null)
        {
            Logger.LogInformation("No Donor Find with that Number");
        }
        else
        {
            newDonation.Name = result.Name;
        }
    }

    private async Task DeleteDonationEntry(DonationEntryModel donorEntry)
    {
        await DonationEntryService.DeleteDonorEntryAsync(donorEntry.TransactionId);
        await LoadDonorsByDate(entryDate);
        UpdateEntryCashTotal();
        UpdateEntryCheckTotal();
    }

    private async void UpdateDate(DateTime? newDate)
    {
        if (newDate != null)
        {
            entryDate = newDate;
            await LoadDonorsByDate(entryDate);
            UpdateEntryCashTotal();
            UpdateEntryCheckTotal();
        }
    }

    private void UpdateCashDenomination(string denomination, int newValue)
    {
        CashService.DenominationAmounts[denomination] = newValue;
        UpdateCashTotal();
        cashAmountError = CashService.IsCashAmountsInError(TotalCashAmount, TotalEntryCashAmount);
        StateHasChanged();
    }

    private void UpdateCashTotal()
    {
        TotalCashAmount = CashService.GetTotalCashAmount();
    }

    private async void UpdateEntryCashTotal()
    {
        if (entryDate != null)
        {
            TotalEntryCashAmount = await CashService.GetTotalDonationCashAmount(DateOnly.FromDateTime((DateTime)entryDate));
        }
    }

    private void AddCheckAmount()
    {
        CheckEntryList.Add(0.00m); 
        UpdateCheckTotal(null, null);
    }

    private void UpdateCheckTotal(decimal? newValue, int? index)
    {
        if (index != null && newValue != null)
        {
            CheckEntryList[(int)index] = (decimal)newValue;    
        } 
        TotalCheckAmount = CheckEntryList.Sum();
        checkAmountError = CheckService.IsCheckAmountsInError(TotalCheckAmount, TotalEntryCheckAmount);
        StateHasChanged();
    }

    private async void UpdateEntryCheckTotal()
    {
        if (entryDate != null)
        {
            TotalEntryCheckAmount = await CheckService.GetTotalDonationCheckAmount(DateOnly.FromDateTime((DateTime)entryDate));
        }

    }

}
